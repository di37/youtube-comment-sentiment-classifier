name: CI/CD Pipeline

# Trigger on push to any branch and on pull requests
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main

jobs:
  # ============================================
  # CONTINUOUS INTEGRATION (CI)
  # Runs on all branches to validate code
  # ============================================
  continuous-integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      # Run the DVC pipeline to validate the model training
      - name: Run DVC pipeline
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: me-central-1
        run: |
          dvc repro

      # Push DVC-tracked data to remote storage
      - name: Push DVC-tracked data to remote
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: me-central-1
        run: |
          dvc push

      # Configure Git for automated commits
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Stage all changes (DVC outputs, model files, etc.)
      - name: Add changes to Git
        run: |
          git add .

      # Commit changes (only if not triggered by bot)
      - name: Commit changes
        if: ${{ github.actor != 'github-actions[bot]' }}
        run: |
          git commit -m "Automated commit of DVC outputs and updated code [ci skip]" || echo "No changes to commit"

      # Push changes back to the repository
      - name: Push changes
        if: ${{ github.actor != 'github-actions[bot]' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin ${{ github.ref_name }}

      # Build Docker image to ensure it builds successfully
      - name: Build Docker image
        run: |
          docker build -t isham/simple-ml-app:${{ github.sha }} .

      # Tag the image with commit SHA for tracking
      - name: Tag Docker image
        run: |
          docker tag isham/simple-ml-app:${{ github.sha }} isham/simple-ml-app:latest

      # Optional: Run basic container test
      - name: Test Docker container
        run: |
          docker run --rm isham/simple-ml-app:latest python -c "import app; print('Container test passed')"

  # ============================================
  # CONTINUOUS DEPLOYMENT (CD)
  # Only runs on main branch after CI succeeds
  # ============================================
  continuous-deployment:
    runs-on: ubuntu-latest
    # Only run deployment on main branch
    if: github.ref == 'refs/heads/main'
    # Deployment depends on CI job completing successfully
    needs: continuous-integration

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Login to AWS ECR to push Docker images
      - name: Login to AWS ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region me-central-1 | docker login --username AWS --password-stdin 384887233198.dkr.ecr.me-central-1.amazonaws.com

      # Build Docker image for production deployment
      - name: Build Docker image
        run: |
          docker build -t isham/simple-ml-app .

      # Tag Docker image for ECR
      - name: Tag Docker image for ECR
        run: |
          docker tag isham/simple-ml-app:latest 384887233198.dkr.ecr.me-central-1.amazonaws.com/isham/simple-ml-app:latest

      # Push Docker image to AWS ECR
      - name: Push Docker image to AWS ECR
        run: |
          docker push 384887233198.dkr.ecr.me-central-1.amazonaws.com/isham/simple-ml-app:latest

      # Zip the required files for deployment
      - name: Zip files for deployment
        run: |
          zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_docker.sh

      # Upload the ZIP file to S3
      - name: Upload ZIP to S3
        run: |
          aws s3 cp deployment.zip s3://mlflow-artifacts-ad408878/deployment.zip

      # Deploy to AWS CodeDeploy using the uploaded ZIP file
      - name: Deploy to AWS CodeDeploy
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws deploy create-deployment \
            --application-name YTChromePlugin \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name YTChromePluginDeploymentGroup \
            --s3-location bucket=mlflow-artifacts-ad408878,key=deployment.zip,bundleType=zip \
            --file-exists-behavior OVERWRITE \
            --region me-central-1
