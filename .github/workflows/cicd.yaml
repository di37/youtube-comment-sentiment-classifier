name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '**.md'
      - 'docs/**'

permissions:
  id-token: write
  contents: read

env:
  RUNNER_LABEL: self-hosted-me-central

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install -r requirements.txt

      - name: Lint code
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --statistics

      - name: Run unit tests
        run: |
          pytest tests/ -v || echo "No tests found"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f deployment/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
  Continuous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: [self-hosted, self-hosted-me-central]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Pull latest images
        run: |
          docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
         
      - name: Stop and remove container if running
        run: |
          container_name="youtube-sentiment-api"
          if docker ps -q --filter "name=$container_name" | grep -q .; then
            echo "Stopping existing container..."
            docker stop $container_name || true
            docker rm -fv $container_name || true
          else
            echo "No existing container found"
          fi
       
      - name: Run Docker Image to serve users
        run: |
          docker run -d \
            --name youtube-sentiment-api \
            -p 6889:6889 \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            -e AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }} \
            -e MLFLOW_TRACKING_URI=http://3.29.129.159:5000 \
            -e AWS_ENDPOINT_URL=https://s3.me-central-1.amazonaws.com \
            -e MLFLOW_S3_ENDPOINT_URL=https://s3.me-central-1.amazonaws.com \
            ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Health check
        run: |
          echo "Waiting for container to start..."
          sleep 10
          if curl -f http://localhost:6889/health; then
            echo "Container is healthy"
          else
            echo "Container health check failed"
            docker logs youtube-sentiment-api
            exit 1
          fi

      - name: Clean previous images and containers
        run: |
          docker system prune -f